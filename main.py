import cv2

from consts import ALPHA, BETA, KEY, M, SIGMA
from utils.embedding import additional_embedding
from utils.fourier import get_fft_image, get_phase_matrix, get_abs_matrix, get_complex_matrix, get_inverse_fft_image
from utils.in_out import read_image, write_image
from utils.snipping import get_H_zone, merge_pictures_H_zone
from watermark import generate_watermark, get_rho, builtin_watermark


def get_optimal_alpha(f, abs_fft_container, phase_fft_container, watermark):

    params = {}

    rho = 0.0
    alpha = 0.6
    while rho < 0.9 or alpha < 1.0:
        H_zone_watermark    = additional_embedding(f, BETA, watermark, alpha)

        merged_abs_picture  = merge_pictures_H_zone(abs_fft_container, H_zone_watermark)
        complex_matrix      = get_complex_matrix(merged_abs_picture, phase_fft_container)
        processed_image     = get_inverse_fft_image(complex_matrix)
        write_image(processed_image, 'resource/bridge_processed_tmp.png')

        processed_image     = read_image('resource/bridge_processed_tmp.png')
        fft_p_image         = get_fft_image(processed_image)
        abs_fft_p_image     = get_abs_matrix(fft_p_image)

        H_zone_p            = get_H_zone(abs_fft_p_image)
        changed_watermark   = builtin_watermark(H_zone_p, f, alpha)
        rho                 = get_rho(watermark, changed_watermark)

        psnr = cv2.PSNR(watermark, changed_watermark)

        if rho > 0.9:
            params[psnr] = alpha

        print(f'ùúå: {rho}, Œ±: {alpha}, PSNR: {psnr}')
        alpha += 0.02

    min_psnr = min(params.keys())
    max_alpha = params[min_psnr]
    print(f'Result: Œ±: {max_alpha}, Min PSNR: {min_psnr}')
    return max_alpha


if __name__ == '__main__':

    container = read_image('resource/bridge.tif')

    # 1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –¶–í–ó ùõ∫ –∫–∞–∫ –ø—Å–µ–≤–¥–æ—Å–ª—É—á–∞–π–Ω–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã –∏–∑ —á–∏—Å–µ–ª,
    # —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã—Ö –ø–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º—É –∑–∞–∫–æ–Ω—É
    H_zone_length = int(container.shape[0] * 0.5) * int(container.shape[1] * 0.5)
    watermark, key_gen  = generate_watermark(H_zone_length, M, SIGMA, KEY)

    # 2. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    fft_container       = get_fft_image(container)
    abs_fft_container   = get_abs_matrix(fft_container)
    phase_fft_container = get_phase_matrix(fft_container)

    # 3. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∞–¥–¥–∏—Ç–∏–≤–Ω—ã–º –º–µ—Ç–æ–¥–æ–º –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è.
    # –ó–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–º –æ–±—Ä–∞–∑–æ–º.
    H_zone              = get_H_zone(abs_fft_container)
    watermark           = watermark.reshape(H_zone.shape)
    H_zone_watermark    = additional_embedding(H_zone, BETA, watermark, ALPHA)

    # 4. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ—Å–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø—Ä–∏ –ø–æ–º–æ—â–∏ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    # –æ—Ç –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∫ —Ü–∏—Ñ—Ä–æ–≤–æ–º—É —Å–∏–≥–Ω–∞–ª—É.  –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –Ω–∞ –¥–∏—Å–∫.
    merged_abs_picture  = merge_pictures_H_zone(abs_fft_container, H_zone_watermark)
    complex_matrix      = get_complex_matrix(merged_abs_picture, phase_fft_container)
    processed_image     = get_inverse_fft_image(complex_matrix)
    write_image(processed_image, 'resource/bridge_processed.tif')

    # 5. –°—á–∏—Ç–∞—Ç—å –Ω–æ—Å–∏—Ç–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∫ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤—É –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    processed_image2    = read_image('resource/bridge_processed.tif')
    fft_p_image         = get_fft_image(processed_image)
    abs_fft_p_image     = get_abs_matrix(fft_p_image)

    # 6. –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –¶–í–ó ùõ∫ÃÉ–Ω–µ—Å–ª–µ–ø—ã–º –º–µ—Ç–æ–¥–æ–º (—Ç–æ –µ—Å—Ç—å, —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    # –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞); –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ–º–æ—â–∏ —Ñ—É–Ω–∫—Ü–∏–∏
    # –±–ª–∏–∑–æ—Å—Ç–∏ ùúå(ùõ∫,ùõ∫ÃÉ) –≤–∏–¥–∞ (6.11).
    H_zone_p            = get_H_zone(abs_fft_p_image)
    changed_watermark   = builtin_watermark(H_zone_p, H_zone, ALPHA)
    rho                 = get_rho(watermark, changed_watermark)

    print(f'ùúå: {rho}')

    get_optimal_alpha(H_zone, abs_fft_container, phase_fft_container, watermark)
    # 7. –û—Å—É—â–µ—Å—Ç–≤–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥–±–æ—Ä –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –º–µ—Ç–æ–¥–æ–º –ø–µ—Ä–µ–±–æ—Ä–∞
    # —Å —Ü–µ–ª—å—é –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –±–ª–∏–∑–æ—Å—Ç–∏ ùúå



    # # 2. Get fft of image
    # fft_container = get_fft_image(container)
    #
    # # 3. Get abs of image (+ phase)
    # abs_fft_container = get_abs_matrix(fft_container)
    #
    # # 4. Snipping
    # H_zone = get_H_zone(abs_fft_container)
    #
    # # 5.
    #
    # new_shape = [1, H_zone.shape[0] * H_zone.shape[1]]
    #
    # result_image = read_image('resource/result.png')
    # fft_recover = get_fft_image(result_image)
    # abs_fft_recover = get_abs_matrix(fft_recover)
    # H_zone_recover = get_H_zone(abs_fft_recover).reshape(new_shape[0], new_shape[1])
    #
    #
    # watermark_length = H_zone.shape[0] * H_zone.shape[1]
    # watermark = generate_watermark(watermark_length, 300, 10, KEY)[0]
    #
    # H_zone = H_zone.reshape(new_shape[0], new_shape[1])
    #
    # reshaped_watermark = watermark.reshape(new_shape[0], new_shape[1])
    #
    # prox_measure = proximity_measure(reshaped_watermark, builtin_watermark(H_zone_recover, H_zone, ALPHA))
    # print(f'Proximity measure: {prox_measure}')

    # +====================================================================================================

    # fft_container = get_fft_image(container)
    # abs_fft_container = get_abs_matrix(fft_container)
    # phase_fft_container = get_phase_matrix(fft_container)
    #
    # H_zone = get_H_zone(abs_fft_container)
    # initial_parts = split_image_to_4_parts(H_zone)
    # watermark_length = initial_parts[0].shape[0] * initial_parts[0].shape[1]
    # watermark = generate_watermark(watermark_length, 300, 10, KEY)[0]
    #
    # for i in range(0, 4, 1):
    #     initial_parts[i] = multiplication_embedding(initial_parts[i], BETA, watermark.reshape(initial_parts[i].shape[0],
    #                                                                                           initial_parts[i].shape[
    #                                                                                               1]), ALPHA)
    #
    # abs_container_with_watermark = merge_pictures_H_zone_parts(abs_fft_container, initial_parts)
    # complex_container_with_watermark = get_complex_matrix(abs_container_with_watermark, phase_fft_container)
    # result_image = get_inverse_fft_image(complex_container_with_watermark)
    # write_image(result_image, 'resource/Paul.png')
    #
    # # result_image = read_image('resource/result.png')
    # abs_fft_container = get_abs_matrix(get_fft_image(container))
    # H_zone = get_H_zone(abs_fft_container)
    # initial_parts = split_image_to_4_parts(H_zone)
    #
    # different_fragments(initial_parts, result_image, watermark)

    # alpha_result = get_optimal_parameter(container)
    # print(f'{alpha_result}')
